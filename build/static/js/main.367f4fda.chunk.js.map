{"version":3,"sources":["Info.js","Utils.js","CustumizedAxis.js","Chart.js","Progress.js","App.js","serviceWorker.js","index.js"],"names":["Info","props","react_default","a","createElement","className","updateRiskAssets","_len","arguments","length","assets","Array","_key","text","color","value","CustomizedAxisTick","PureComponent","_this$props2","this","x","y","payload","stroke","transform","concat","dy","textAnchor","fill","Chart","es6","Object","assign","width","height","margin","top","right","left","bottom","dataKey","tick","CustumizedAxis_CustomizedAxisTick","type","activeDot","r","Progress","style","backgroundColor","App","_useState","useState","_useState2","slicedToArray","score","setScore","_useState3","_useState4","isHistoricalVisible","setHistoricalVisible","_useState5","_useState6","riskAssets","setRiskAssets","_useState7","name","uv","pv","amt","_useState8","chartData","maxScore","iterate","Fragment","onClick","map","item","index","key","data","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.367f4fda.chunk.js","sourcesContent":["import React from 'react';\n\n/*\n * Item info component\n */\nexport function Info (props) {\n    return (\n      <button className='info-btn flex align-center'>\n        <span>i</span>\n      </button>\n    );\n}","\n/*\n * Function that manipulates the risk assets. \n * It returns an immutable array containing the new updated risk assets\n */\nexport function updateRiskAssets (...assets) {\n    assets = assets[0];\n    return [\n      {\n        text: 'Fixed Income', \n        color: '#800080',\n        value: assets[0] \n      },\n      {\n        text: 'Developed Market Stocks', \n        color: '#4B0082',\n        value: assets[1] \n      },\n      {\n        text: 'Emerging Markets Stocks', \n        color: '#0080ff',\n        value: assets[2] \n      },\n      {\n        text: 'Natural Resources', \n        color: '#198c19',\n        value: assets[3] \n      },\n      {\n        text: 'Real Estate', \n        color: '#FFA500',\n        value: assets[4] \n      },\n      {\n        text: 'Cash', \n        color: '#FFFF00',\n        value: assets[5] \n      }\n    ];\n  }","import React, { PureComponent } from 'react';\n\nclass CustomizedLabel extends PureComponent {\n    render() {\n        const {\n        x, y, stroke, value,\n        } = this.props;\n\n        return <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor=\"middle\">{value}</text>;\n    }\n}\n\nclass CustomizedAxisTick extends PureComponent {\n    render() {\n        const {\n        x, y, stroke, payload,\n        } = this.props;\n\n        return (\n        <g transform={`translate(${x},${y})`}>\n            <text x={0} y={0} dy={16} textAnchor=\"end\" fill=\"#666\" transform=\"rotate(-35)\">{payload.value}</text>\n        </g>\n        );\n    }\n}\n\nexport {\n    CustomizedLabel,\n    CustomizedAxisTick\n}","import React from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport { CustomizedAxisTick, CustomizedLabel } from './CustumizedAxis'\n\nexport function Chart (props) {\n    return (\n        <LineChart\n            width={700}\n            height={350}\n            {...props}\n            margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n            }}\n        >\n            <CartesianGrid stroke=\"#c0c0c08a\"  />\n            <XAxis dataKey=\"name\" height={60} tick={<CustomizedAxisTick />} />\n            <YAxis />\n            <Tooltip />\n            {/* <Legend /> */}\n            <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n        </LineChart>\n    );\n}","import React from 'react';\nimport { Info } from './Info';\n\n/*\n * Progress Component\n */\nexport function Progress (props) {\n    return (\n      <div className='progress-box'>\n        <div className='progress-title flex flex-row justify-between align-center'>\n          <div className='flex align-center'>\n            <span className='progress-title-text progress-text'>\n              {props.text}\n            </span>\n            <Info></Info>\n          </div>\n          <span className='progress-title-text progress-value'>\n            {props.value}%\n          </span>\n        </div>\n        <div className='progress-bar'>\n          <div className='progress-bar-inner' style={{width: `${props.value}%`, backgroundColor: props.color}}></div>\n        </div>\n      </div>\n    );\n  }","import React, { useState } from 'react';\nimport './App.css';\nimport { Info } from './Info';\nimport { updateRiskAssets } from './Utils';\nimport { Chart } from './Chart';\nimport { Progress } from './Progress';\n\n/*\n * Main App Component which renders the main view\n */\nfunction App() {\n  let [score, setScore] = useState(1);\n  let [isHistoricalVisible, setHistoricalVisible] = useState(true);\n  let [riskAssets, setRiskAssets] = useState(updateRiskAssets([10, 20, 20, 40, 5, 5]));\n  let [chartData, setChartData] = useState([\n    {\n      name: 'Jun 2004', uv: 4000, pv: 2400, amt: 2400, \n    },\n    {\n      name: 'Dec 2006', uv: 3000, pv: 1398, amt: 2210,\n    },\n    {\n      name: 'Jun 2009', uv: 2000, pv: 9800, amt: 2290,\n    },\n    {\n      name: 'Dec 2011', uv: 2780, pv: 3908, amt: 2000,\n    },\n    {\n      name: 'Jun 2014', uv: 1890, pv: 4800, amt: 2181,\n    },\n    {\n      name: 'Dec 2016', uv: 2390, pv: 3800, amt: 2500,\n    }\n  ]);\n  const maxScore = 11;\n\n  function toggleHistorical() {\n    isHistoricalVisible = !isHistoricalVisible;\n    setHistoricalVisible(isHistoricalVisible);\n  }\n\n  function iterate (type) {\n    if (type) { //forwards\n      score = score >= maxScore - 1 ? 1 : ++score;\n    } else { //backwards\n      score = score <= 1 ? maxScore - 1 : --score;\n    }\n    switch(score) {\n      case 1: case 3: case 7: {\n        riskAssets = updateRiskAssets([10, 20, 20, 40, 5, 5]);\n        break;\n      }\n      case 2: case 5: case 8: case 10: {\n        riskAssets = updateRiskAssets([0, 40, 20, 20, 10, 10]);\n        break;\n      }\n      case 4: case 6: case 9: {\n        riskAssets = updateRiskAssets([70, 10, 5, 5, 0, 10]);\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n    setScore(score);\n    setRiskAssets(riskAssets);\n  }\n  \n  return (\n    <>\n      <nav className='nav flex justify-center align-center'>\n        <h4 className='nav-text'>Our Recommendation</h4>\n      </nav>\n\n      <main className='App'>\n\n        <header className='header'>\n          <h2 className='header-title'>\n            We recommend a Balanced portfolio\n          </h2>\n          <h6 className='header-subtitle'>\n            This means your asset mix will focus on income and growth instruments to achieve greater returns.\n            You can expect to see some downturns to achieve such returns\n          </h6>\n        </header>\n\n        <h3 className='risk-calculator-header'>\n          Your risk tolerance  \n        </h3>\n        \n        <div className='risk-calculator flex flex-row justify-between align-center'>\n          <button onClick={()=>iterate(0)} \n                  className='risk-calculator-btn risk-calculator-prev flex justify-center align-center'>\n          </button>\n          <span className='risk-calculator-value'>{score}</span>\n          <button onClick={()=>iterate(1)} \n                  className='risk-calculator-btn risk-calculator-next flex justify-center align-center'>\n          </button>\n        </div>\n\n        <p className='recommend-text'>\n          We recommend 7\n        </p>\n\n        <div className='risk-assets'>\n            <div className='risk-assets-header flex flex-row justify-between align-center'>\n              <span className='risk-assets-header-text'>\n                ASSET CLASS\n              </span>\n              <span className='risk-assets-header-text'>\n                ALLOCATION\n              </span>\n            </div>\n            {\n              riskAssets.map( (item, index) => <Progress {...item} key={index}></Progress> )\n            }\n        </div>\n\n        <button onClick={toggleHistorical} \n                className={`view-historical-btn ${isHistoricalVisible ? 'toggled' : ''}`}>\n          <span className='view-historical-btn-txt'>\n            View Historical Performance\n          </span>\n          <span className='view-historical-btn-arrow'></span>\n        </button>\n        \n        {\n          isHistoricalVisible && (\n            <span>\n              <div className='investment-header'>  \n                <h3 className='investment-header-title'>\n                  Based on a $100,000 investment\n                </h3>\n                <h5 className='investment-header-text'>\n                  (4.8% growth p.a)\n                </h5> \n                <Info></Info>\n              </div>\n\n              <section className='chart'>\n                <Chart data={chartData}></Chart>\n              </section>\n            </span>\n          )\n        }\n            \n        <button className='open-accnt-btn flex align-center justify-center'>\n          <span className='open-accnt-text'>Open my account</span>\n        </button>\n\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}